{"version":3,"sources":["helpers/music.js","Staff.js","Fretboard.js","App.js","index.js"],"names":["chromaticScale","combineNoteOctave","note","octave","splitNoteOctave","input","match","toUpperCase","getNoteSet","high","low","scale","highNote","highOct","lowNote","lowOct","currNote","currOct","scaleIndex","indexOf","set","Set","add","length","Array","from","getNoteAtSemiOffset","offset","startNote","startOct","i","console","log","Staff","width","height","transpose","vfRef","useRef","modifiedNote","useEffect","current","Vex","Flow","Factory","renderer","elementId","vf","context","clear","score","EasyScore","System","addStave","voices","voice","notes","addClef","draw","id","Fretboard","tuning","frets","showNote","showAllNotes","stringDist","Math","round","margin","fretDist","notesOnStrings","map","viewBox","index","y","key","x","fontSize","dominantBaseline","x1","x2","y1","y2","stroke","keys","fret","dot","floor","cx","cy","rx","ry","fill","index1","slice","index2","show","className","textAnchor","notesOnGuitar","randomIndex","arr","random","App","useState","noteIndex","setNoteIndex","showAnswer","setShowAnswer","showAll","setShowAll","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bab946d8.chunk.js","sourcesContent":["export const chromaticScale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\nexport function combineNoteOctave(note, octave) {\n  return `${note}${octave}`\n}\n\nexport function splitNoteOctave(input) {\n  const match = input.match(/^([A-Ga-g](?:#|b)?)(\\d)$/)\n  const note = match[1].toUpperCase()\n  const octave = +match[2]\n\n  return [note, octave]\n}\n\nconsole.log(splitNoteOctave('E5'))\n\nexport function getNoteSet(high, low, scale = chromaticScale) {\n  const [ highNote, highOct ] = splitNoteOctave(high)\n  const [ lowNote, lowOct ] = splitNoteOctave(low)\n  let currNote = lowNote\n  let currOct = lowOct\n  let scaleIndex = scale.indexOf(lowNote)\n  const set = new Set()\n\n  while (true) {\n    set.add(combineNoteOctave(currNote, currOct))\n    scaleIndex += 1\n    if (scaleIndex === scale.length) {\n      scaleIndex = 0\n      currOct += 1\n    }\n\n    currNote = scale[scaleIndex]\n\n    if (currNote === highNote && currOct === highOct) {\n      break\n    }\n  }\n\n  set.add(`${highNote}${highOct}`)\n  return Array.from(set)\n}\n\nexport function getNoteAtSemiOffset(note, offset, scale = chromaticScale) {\n  let [ startNote, startOct ] = splitNoteOctave(note)\n  let scaleIndex = scale.indexOf(startNote)\n\n  for (let i = 0; i < offset; i++) {\n    scaleIndex++\n    if (scaleIndex === scale.length) {\n      startOct++\n      scaleIndex = 0\n    }\n  }\n\n  return combineNoteOctave(scale[scaleIndex], startOct)\n}\n\nconsole.log(getNoteAtSemiOffset('B3', 3)) // D4","import React, { useEffect, useRef } from 'react'\nimport Vex from 'vexflow'\n\nimport {\n  splitNoteOctave,\n  combineNoteOctave,\n} from './helpers/music'\n\nexport default function Staff({\n  note = 'C#5',\n  width,\n  height,\n  transpose,\n}) {\n  const vfRef = useRef()\n\n  const [ baseNote, octave ] = splitNoteOctave(note)\n  const octaveOffset = transpose ? 1 : 0\n  const modifiedNote = combineNoteOctave(baseNote, octave + octaveOffset)\n\n  useEffect(() => {\n    if (!vfRef.current) {\n      vfRef.current = new Vex.Flow.Factory({\n        renderer: {\n          elementId: 'staff',\n          width,\n          height\n        }\n      })\n    }\n    var vf = vfRef.current\n    vf.context.clear()\n    \n    var score = vf.EasyScore();\n    var system = vf.System();\n    \n    system.addStave({\n      voices: [\n        score.voice(score.notes(modifiedNote + '/w'))\n      ]\n    })\n    .addClef('treble')\n    \n    vf.draw();\n  })\n\n  return (\n    <div id=\"staff\"></div>\n  )\n}","import React from 'react'\nimport {\n  getNoteSet,\n  getNoteAtSemiOffset,\n} from './helpers/music'\n\nexport default function Fretboard({\n  note,\n  tuning,\n  frets,\n  width,\n  height,\n  showNote = true,\n  showAllNotes = true\n}) {\n  const margin = 20\n  const doubleMargin = margin * 2\n  const stringDist = Math.round((height - doubleMargin) / (tuning.length - 1))\n  const fretDist = Math.round((width - doubleMargin) / frets)\n\n  const notesOnStrings = tuning.map(low => {\n    const high = getNoteAtSemiOffset(low, frets)\n    return getNoteSet(high, low)\n  })\n\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\n      {\n        // Strings and string notes\n        tuning.map((note, index) => {\n          const y = stringDist * index + margin\n          return (\n            <g key={index}>\n              <text x=\"0\"\n                y={y}\n                fontSize=\"11\"\n                dominantBaseline=\"middle\">\n                { note }\n              </text>\n              <line x1={margin}\n                x2={width - margin}\n                y1={y}\n                y2={y}\n                stroke=\"black\" />\n            </g>\n          )\n        })\n      }\n\n      {\n        // Frets\n        [...Array(frets + 1).keys()].map(fret => {\n          const x = fretDist * fret + margin\n          return (\n            <line x1={x}\n              x2={x}\n              y1={margin}\n              y2={height - margin}\n              stroke=\"black\"\n              key={fret} />\n          )\n        })\n      }\n\n      {\n        [3, 5, 7, 9].map(dot => {\n          const x = Math.floor(margin + (dot * fretDist) - fretDist / 2)\n          const y = Math.floor(height / 2)\n          return (\n            <ellipse cx={x}\n              cy={y}\n              rx=\"8\"\n              ry=\"8\"\n              stroke=\"black\"\n              fill=\"black\" />\n          )\n        })\n      }\n\n      <ellipse cx={Math.floor(margin + (12 * fretDist) - fretDist / 2)}\n        cy={Math.floor(margin + stringDist + stringDist / 2)}\n        rx=\"8\"\n        ry=\"8\"\n        stroke=\"black\"\n        fill=\"black\" />\n      <ellipse cx={Math.floor(margin + (12 * fretDist) - fretDist / 2)}\n        cy={Math.floor(margin + (stringDist * 3) + stringDist / 2)}\n        rx=\"8\"\n        ry=\"8\"\n        stroke=\"black\"\n        fill=\"black\" />\n\n      {\n        notesOnStrings.map((notes, index1) => {\n          const y = margin + (stringDist * index1)\n          return (\n            <g key={index1}>\n              {\n                notes.slice(1).map((currNote, index2) => {\n                  const x = margin + (index2 * fretDist) + Math.floor(fretDist / 2)\n                  const show = showAllNotes || (note === currNote && showNote)\n                  return (\n                    <g className={show ? '' : 'hide'}\n                      key={index2}>\n                      <ellipse cx={x}\n                        cy={y}\n                        rx=\"10\"\n                        ry=\"10\"\n                        stroke=\"black\"\n                        fill=\"white\" />\n                      <text x={x}\n                        y={y}\n                        fontSize=\"8\"\n                        dominantBaseline=\"middle\"\n                        textAnchor=\"middle\">\n                        { currNote }\n                      </text>\n                    </g>\n                  )\n                })\n              }\n            </g>\n          )\n        })\n      }\n    </svg>\n  )\n}","import React, { useState } from 'react';\nimport {\n  getNoteSet,\n  getNoteAtSemiOffset,\n} from './helpers/music'\nimport './App.css';\n\nimport Staff from './Staff'\nimport Fretboard from './Fretboard'\n\n// Some stuff that might be adjustable in the future\nlet tuning = ['E4', 'B3', 'G3', 'D3', 'A2', 'E2']\nconst frets = 12\n\nconst notesOnGuitar = getNoteSet(\n  getNoteAtSemiOffset(tuning[0], frets),\n  tuning[tuning.length - 1]\n)\n\nfunction randomIndex(arr) {\n  return Math.floor(Math.random() * (arr.length + 1));\n}\n\nfunction App() {\n  const [noteIndex, setNoteIndex] = useState(randomIndex(notesOnGuitar))\n  const [showAnswer, setShowAnswer] = useState(false)\n  const [showAll, setShowAll] = useState(false)\n\n  function getNewQuestion() {\n    setShowAnswer(false)\n    setShowAll(false)\n    setNoteIndex(randomIndex(notesOnGuitar))\n  }\n\n  return (\n    <div className=\"App\">\n      <Staff note={notesOnGuitar[noteIndex]}\n        width=\"525\"\n        height=\"200\"\n        transpose />\n      <Fretboard note={notesOnGuitar[noteIndex]}\n        tuning={tuning}\n        frets={frets}\n        width=\"525\"\n        height=\"200\"\n        showNote={showAnswer}\n        showAllNotes={showAll} />\n      <div className=\"controls\">\n        <button onClick={() => setShowAll(!showAll)}>\n          { showAll ? 'Hide' : 'Show' } All Notes\n        </button>\n\n        <button onClick={getNewQuestion}>\n          New Question\n        </button>\n\n        {\n          !showAnswer && (\n            <button onClick={() => setShowAnswer(true)}>\n              Show Answer\n            </button>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}